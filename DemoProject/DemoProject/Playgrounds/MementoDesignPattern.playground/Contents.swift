/*
 The Memento Pattern saves your stuff somewhere. Later on, this externalized state can be restored without violating encapsulation, that is, private data remains private. Essentially, it is a pattern that aims to capture the current state of an object and store it in such a way that you can retrieve it at a later time when you would like to return to the previous state.
 Implementations example of the Memento pattern is Archiving, Serialization and State Restoration.
 iOS uses the Memento pattern as part of State Restoration. Essentially it stores and re-applies your application's state so the user is back where they left things.
 For example, we can save a tableview current selected item using its indexpath, to maintain the state of a tableviewcontroller by saving the index using encodeRestorableState (this will happen when your app enters the background) and restoring it using decodeRestorableState (this will happen when the app is launched, after the view of your view // controller is loaded).
 
 One of Apple's specialized implementations of the Memento pattern can be achieved through archiving and serialization. Before Swift 4, to serialize and archive your custom types you'd have to jump through a number of steps. For class types you'd need to subclass NSObject and conform to NSCoding protocol. Value types like struct and enum required a sub object that can extend NSObject and conform to NSCoding. Swift 4 resolves this issue for all these three types: class, struct and enum by introducing Codable. This protocol is the only thing required to make a Swift type Encodable and Decodable. If all properties are Codable, the protocol implementation is automatically generated by the compiler.
 */


import UIKit

// We have a protocol Memento with default implementation of save and retrieve methods.
// save saves the `state` property with key in UserDefaults.
// retrieve restores the `state` property using key from UserDefaults.
// state is of type dictionary which stores the value with a unique key
// key is used to retrieve the corresponding value from the state
typealias MementoType = [String: Any]
protocol Memento: class {
    var key: String  { get set }
    var state: MementoType { get set }
    
    func save()
    func retrieve()
}

// Memento extesion that implements the save and retrieve state of object
extension Memento {
    func save() {
        UserDefaults.standard.set(state, forKey: key)
    }
    
    func retrieve() {
        state = (UserDefaults.standard.object(forKey: key) as? MementoType) ?? MementoType()
    }
}

// Profile will implement Memento protocol.
// By implementing this protocol, we can save the entire class to persistent storage and then retrieve the state at later time.
class Profile: Memento {
    enum Country: String {
        case uk             = "United Kingdom"
        case france         = "France"
        case germany        = "Germany"
        case usa            = "United States"
        case china          = "China"
        case autralia       = "Australia"
        case newzealand     = "New Zealand"
        case canada         = "Canada"
        case none         = ""
    }
    var key: String
    var state: MementoType
    
    var name: String
    var age: Int
    var telephone: Int
    var country: Country
    
    init(name: String, age: Int, telephone: Int, country: Country) {
        self.name = name
        self.age = age
        self.telephone = telephone
        self.country = country
        self.key = name+"\(age)"+"\(telephone)"+country.rawValue
        self.state = MementoType()
    }
    
    func saveDetails() {
        state["name"] = name
        state["age"] = age
        state["telephone"] = telephone
        state["country"] = country.rawValue
        print("saving key \(key)")
        save()
    }
    
    init() {
        self.key = "defaultkey"
        self.state = MementoType()
        self.name = ""
        self.age = 0
        self.telephone = 0
        self.country = .none
    }
    
    static func retrieveDetails(of profile: Profile) -> MementoType {
        profile.retrieve()
        return profile.state
    }
}

var profile = Profile(name: "Nick Jonas", age: 36, telephone: 02080220560, country: .uk)
profile.saveDetails()

profile = Profile(name: "Priyanka Chopra", age: 26, telephone: 5555551234, country: .usa)
profile.saveDetails()

let profileState = Profile.retrieveDetails(of: profile)
print(profileState)

