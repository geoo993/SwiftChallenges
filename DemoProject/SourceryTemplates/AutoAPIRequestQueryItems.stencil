private protocol QueryStringConvertible {
  var queryStringValue: String? { get }
}

extension String: QueryStringConvertible {
  var queryStringValue: String? {
    return self
  }
}

extension Int: QueryStringConvertible {
  var queryStringValue: String? {
    return String(self)
  }
}

extension Bool: QueryStringConvertible {
  var queryStringValue: String? {
    return self ? "Y" : "N"
  }
}


{% for type in types.implementing.AutoQueryItems %}
{# Iterate over all types implementing AutoQueryItems #}
extension {{ type.name }} {

  public var queryItems: [URLQueryItem] {
    var items = [URLQueryItem]()
    {% for variable in type.variables|annotated:"queryItem" %}
      {# Iterate over all variables annotated as queryItem #}
      if let {{variable.name}} = {{variable.name}}?.queryStringValue {
        items.append(URLQueryItem(name: "{{variable.name}}", value: {{variable.name}}))
      }
    {% endfor %}
    return items
  }
}

{% endfor %}
